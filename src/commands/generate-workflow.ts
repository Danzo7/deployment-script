import { AppRepo } from '../db/repos.js';
import { Logger } from '../utils/logger.js';
import { discardUncommittedChanges, pushChanges } from '../utils/git-helper.js';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { join } from 'path';
import { ensureDirectories } from '../utils/file-utils.js';
import { simpleGit } from 'simple-git';

export const generateWorkflow = async ({
  name,
}: {
  name: string;
}) => {
  try {
    Logger.info(`Generating workflow for app: ${Logger.highlight(name)}...`);

    const app = AppRepo.getAll().find((app) => app.name === name);
    if (!app) {
      throw new Error(`App "${Logger.highlight(name)}" not found.`);
    }

    // Step 1: Check if the app has been deployed (app.lastDeploy is not null)
    if (!app.lastDeploy) {
      throw new Error(`App "${Logger.highlight(name)}" has not been deployed yet. Cannot generate workflow.`);
    }
    if(app.repo.includes('github')) {
      throw new Error(`"${Logger.highlight(name)}" is using an external version control. Cannot generate workflow.`);
    }

    // Step 2: Create the deploy.yaml content for the Gitea Actions
    const deployYamlContent = `# This workflow is generated by Deployment Manager CLI
# Gitea Actions Workflow for Application Deployment

name: Deploy Application
run-name: ðŸš€ Deploying Application via Gitea Actions

on: [push]

jobs:
  deploy-job: 
    name: Deploy Application
    runs-on: windows

    steps:
      - name: Deploy the application using dm CLI
        run: |
          dm deploy ${name}
`;

    // Step 3: Write the deploy.yaml file to the .gitea/workflows directory
    const {relDir} = ensureDirectories(app.appDir);
    
    // Check if there are uncommitted changes before discarding them
    const git = simpleGit(relDir);
    const status = await git.status();
    
    if (status.files.length > 0) {
      Logger.info('Cleaning local repository...');
      await discardUncommittedChanges(relDir);
    } else {
      Logger.info('Repository is already clean.');
    }

    const workflowDir = join(relDir, '.gitea', 'workflows');
    
    try {
      if(!existsSync(workflowDir)) {
        mkdirSync(workflowDir, { recursive: true });
        Logger.info(`Created workflow directory: ${workflowDir}`);
      }
    } catch (error) {
      throw new Error(`Failed to create workflow directory: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
    
    const yamlFilePath = join(workflowDir, 'deploy.yaml');

    Logger.info(`Writing deploy.yaml to: ${yamlFilePath}`);
    
    try {
      writeFileSync(yamlFilePath, deployYamlContent);
      Logger.success('Workflow file created successfully.');
    } catch (error) {
      throw new Error(`Failed to write workflow file: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }

    // Step 4: Use git-helper to push the new workflow to the repository
    Logger.info('Pushing deploy.yaml to Git...');
    await pushChanges({
      dir: relDir,
      commitMessage:"[CLI-tool] Creating deployment workflow"    
    });

    Logger.success('Deploy workflow generated and pushed successfully!');
  } catch (error) {
    Logger.error(`Failed to generate workflow: ${error instanceof Error ? error.message : 'Unknown error'}`);
    throw error;
  }
};